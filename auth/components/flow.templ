package components

import (
	"fmt"
	"internal/helpers"
	"github.com/m3rashid/central/auth/models"
)

templ cardContainer (client models.Client) {
	@rootHTML() {
		<div class="all-center h-screen">
			<div class="w-[320px] flex flex-col items-center justify-center p-8 h-min shadow-md rounded-md">
				if client.AppLogoUrl != "" {
					<img height="50px" width="50px" class="text-center" src={ client.AppLogoUrl } alt="app_logo"/>
				}
				if client.AppName != "" {
					<h3 class="text-center">{ client.AppName }</h3>
				}
				{ children... }
			</div>
		</div>
	}
}

type LoginOrRegisterProps struct {
	IsRegister         bool
	FlowQueryString    string
	LoginEndpoint      string
	RegisterEndpoint   string
	SelectUserEndpoint string
}

templ LoginOrRegister (props LoginOrRegisterProps, client models.Client) {
	@cardContainer(client) {
		<form
			method="POST"
			class="flex flex-col items-center gap-8 mb-8"
			action={ templ.SafeURL(helpers.Ternary[string](props.IsRegister, "/register"+props.FlowQueryString, "/login"+props.FlowQueryString)) }
		>
			if props.IsRegister {
				@input(InputProps{ 
					Label: "Name",
					TopRightText: "*",
					InputID: "name",
					InputName: "name",
					InputPlaceholder: "Your name here",
				})
			}
			@input(InputProps{ 
					Label: "Email",
					TopRightText: "*",
					InputID: "email",
					InputName: "email",
					InputType: "email",
					InputPlaceholder: "user@email.com",
				})
			@input(InputProps{ 
					Label: "Password",
					TopRightText: "*",
					InputID: "password",
					InputName: "password",
					InputType: "password",
					InputPlaceholder: "Shh ...",
				})
			@button(ButtonProps{
					ButtonText: "Login",
					ButtonType: "submit",
				})
			<fluent-button appearance="accent" type="submit">Login</fluent-button>
		</form>
		if props.IsRegister {
			<a class="text-center" href={ templ.SafeURL(props.LoginEndpoint) }>Account Not Listed here? Login</a>
		} else {
			<a class="text-center" href={ templ.SafeURL(props.RegisterEndpoint) }>Don't Have an account? Register</a>
		}
		<a class="text-center mt-8" href={ templ.SafeURL(props.SelectUserEndpoint) }>Already logged in? Select account</a>
	}
}

type SelectUserProps struct {
	Users             []models.User
	Client            models.Client
	LoginEndpoint     string
	RegisterEndpoint  string
	UserIDSelectedURL string
}

script onUserIDSelect(url string) {
	return fetch(url, { method: "POST" })
}

templ SelectUser (props SelectUserProps) {
	@cardContainer(props.Client) {
		<div class="flex items-center flex-col gap-8">
			for _, user := range props.Users {
				<a
					class="flex flex-col justify-center mb-8 cursor-pointer"
					href={ templ.SafeURL(props.UserIDSelectedURL + fmt.Sprint(user.ID)) }
				>
					<p class="m-0">{ user.Name }</p>
					<p class="m-0">{ user.Email }</p>
				</a>
			}
		</div>
		<a href={ templ.SafeURL(props.LoginEndpoint) }>Account Not Listed here? Login</a>
		<a href={ templ.SafeURL(props.RegisterEndpoint) }>Don't Have an account? Register</a>
	}
}

templ FlowError (errors []string, client models.Client) {
	@cardContainer(client) {
		<h3>Error Occured</h3>
		for _, err := range errors {
			<div>{ err }</div>
		}
	}
}

type ConsentScreenScope struct {
	Name        string
	Permissions []string
}

type ConsentScreenProps struct {
	Client          models.Client
	Scopes          []ConsentScreenScope
	AllowConsentUrl string
	DenyConsentUrl  string
}

script handleConsent(url string) {
	window.location.href = url
}

templ ConsentScreen(props ConsentScreenProps) {
	@cardContainer(props.Client) {
		<p class="text-center">
			<strong>{ props.Client.AppName }</strong>&nbsp;
			would like to access the following from your account
		</p>
		for _, scope := range props.Scopes {
			<div class="flex items-center flex-col gap-3 mb-8">
				<p>{ scope.Name }</p>
				for _, perm := range scope.Permissions {
					<p>{ perm }</p>
				}
			</div>
		}
		<h3 class="text-center">Do you allow ?</h3>
		<div class="flex items-center justify-between gap-6 mt-8 width-full">
			@button(ButtonProps{
					ButtonText: "Cancel",
					onClick: handleConsent(props.DenyConsentUrl),
				})
			@button(ButtonProps{
					ButtonText: "Allow",
					onClick:handleConsent(props.AllowConsentUrl),
				})
		</div>
	}
}

templ LogoutScreen(client models.Client) {
	@cardContainer(client) {
		<h3>Are you sure you want to logout?</h3>
		<div>
			@button(ButtonProps{
					ButtonText: "Cancel",
				})
			@button(ButtonProps{
					ButtonText: "Logout",
				})
		</div>
	}
}
